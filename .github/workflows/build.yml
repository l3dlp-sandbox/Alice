name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
    paths-ignore:
      - '**.md'
      - '**.spec.js'
      - '.idea'
      - '.vscode'
      - '.dockerignore'
      - 'Dockerfile'
      - '.gitignore'
      - '.github/**'
      - '!.github/workflows/build.yml'

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Get app version from package.json
        id: get_version
        run: echo "APP_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        shell: bash

      - name: Build Release Files
        run: npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare artifact details for ${{ matrix.os }}
        id: prep_artifact
        shell: bash
        run: |
          VERSION="${{ env.APP_VERSION }}"
          # Ensure PRODUCT_NAME matches 'productName' in electron-builder.json5
          PRODUCT_NAME="Alice app"

          ARTIFACT_FILENAME=""
          ARTIFACT_FILEPATH=""

          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            # From electron-builder.json5: artifactName: '${productName}-Mac-${version}-Installer.${ext}' -> .dmg
            ARTIFACT_FILENAME="$PRODUCT_NAME-Mac-$VERSION-Installer.dmg"
            ARTIFACT_FILEPATH="release/$VERSION/$ARTIFACT_FILENAME"
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            # From electron-builder.json5: artifactName: '${productName}-Windows-${version}-Setup.${ext}' -> .exe for nsis
            ARTIFACT_FILENAME="$PRODUCT_NAME-Windows-$VERSION-Setup.exe"
            ARTIFACT_FILEPATH="release/$VERSION/$ARTIFACT_FILENAME"
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            # From electron-builder.json5: artifactName: '${productName}-Linux-${version}.${ext}' -> .AppImage
            ARTIFACT_FILENAME="$PRODUCT_NAME-Linux-$VERSION.AppImage"
            ARTIFACT_FILEPATH="release/$VERSION/$ARTIFACT_FILENAME"
          fi

          echo "ARTIFACT_NAME=${ARTIFACT_FILENAME}" >> $GITHUB_ENV
          echo "ARTIFACT_PATH=${ARTIFACT_FILEPATH}" >> $GITHUB_ENV

      - name: Verify Artifact Path
        shell: bash
        run: |
          echo "Expecting artifact name: ${{ env.ARTIFACT_NAME }}"
          echo "Expecting artifact at path: ${{ env.ARTIFACT_PATH }}"
          ls -l "${{ env.ARTIFACT_PATH }}"

      - name: Upload Release Asset for ${{ matrix.os }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error
          retention-days: 5

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout code (needed for release notes generation)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download all release assets
        uses: actions/download-artifact@v4
        with:
          path: ./release-assets

      - name: Display structure of downloaded files
        shell: bash
        run: |
          echo "Downloaded release assets:"
          ls -R ./release-assets
          echo "---"
          echo "GitHub Ref Name (Tag): ${{ github.ref_name }}"
          echo "GitHub Ref Type: ${{ github.ref_type }}"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: './release-assets/*'
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generateReleaseNotes: true
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
